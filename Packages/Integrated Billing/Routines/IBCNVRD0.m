IBCNVRD0 ;ALB/BAA - SYSTEM SHARED VERIFIED INSURANCE  ;25-FEB-15
 ;;2.0;INTEGRATED BILLING;**528**;21-MAR-94;Build 163
 ;;Per VA Directive 6402, this routine should not be modified.
 ;;DAILY TRANSMISSION OF ENTRIES IN IB SSVI PIN/HL7
 ;;
EN ; process entries in SSVI Pivot file
 N NTEARRY,NTITEM,STST,NTITEM1,NTEARRY1,HCOMMENT,HVISIT,HVISITT,HFLAG,HKEEPV,HVISITO,DATEM14,NOW
 N PAT,PREOPHF,PREOPHFD,PREOPHFK
 N DELAYST,NTITEMD,DELARRY
 N NSURGCNT,SITE,SITPTR,TOP,TOPNM,EXPRD
 N NTITEMC,IBP,INGRP,INSURNM,ITEM,ITEMC,LOCATION,PAYER,PAYERNM,PCN
 N DFN,PAT,INSNAME,GROUPLAN,NAME,SSN,GENDER,RACE,BN,BUFF  ; INSNAME IS INSURED  NAME
 N COORDBEN,SUBSCRID,DATELVER,GROUPNUM,INSURDOB,INSURSSN,INSGENDR,GROUPLNM,GROUPPCM
 N PTRELHIP,WHOSEINS,EFFCTDPO,GROUPNAM,PTRELINS,NAMEINS,COMPATPO,SENDBEMP,SUBEMPNM  ; NAMEINS IS NAME OF INSURANCE
 N SEMPLCLA,SEMPLCL2,SEMPLCL3,SEMPLCLC,SEMPLCLS,SEMPLCLZ,SEMPLCLP,ESHGP,INSEXPDT  ; INSEXPDT IS INSURANCE EXPIRATION DATE
 N POLNBILL,INSSTAD,INSSTAD2,INSCITY,INSSTATE,INSZIP,INSPHONE,PATIENTI,FRESHAY,FRESHDT
 N INSNAMEP,STATIONS  ; STATIONS AS ORIGINATING SENDING FACILITY SITE'S STATION NUMBER
 ;
 N LASTINDT,NOWDATE,%
 ;
 ; clean up ^TMP before use.
 K ^TMP($J,"IBSSVI") K ^TMP($J,"IBSSVI-TREATING FACILITY SITE")
 K ^TMP($J,"IBSSVI-PATIENT") K ^TMP($J,"IBSSVI-ACKNOWLEDGE")
 S LASTINDT=$P($G(^IBE(350.9,1,100)),"^",2) ; IN IB SITE PARAMETERS FILE FOR FIRST TIME AND LAST DATE/TIME TRANSMIT TASK RAN
 I LASTINDT="" S LASTINDT=DT-5
 S IBP="|"
 D NOW^%DTC S NOWDATE=%
 ;
 D CYCLE
 ;
 D PROCINS
 ;
 D NOW^%DTC S NOWDATE=%
 S $P(^IBE(350.9,1,100),"^",2)=NOWDATE ; IN IB SITE PARAMETERS FILE FOR FIRST TIME AND LAST DATE/TIME TRANSMIT TASK RAN
END D ^%ZISC
 ; Clean up ^TMP when finished
 K ^TMP($J,"IBSSVI") K ^TMP($J,"IBSSVI-TREATING FACILITY SITE")
 K ^TMP($J,"IBSSVI-PATIENT")
 D EXIT
 Q
 ;
PROCINS ;
 N LEN,STST,SURGCNT,NCANCNOD,INSPTR1,STATION,TRANSDAT,IENL,UPDATEDT,HL7MSGPT,ORGSENDT,INSPTR2
 N COUNT,INSPTR,DFN,STNCNT,CNTHL7 ; CNTHL7 AS PIVOT PTR
 N DEFINST,STATION,DSTATION,ICNTSTA,GLOB,RPCVER,HNDLS,CNT
 S RPCVER=1
 S DFN=0  ; AS DFN
 F  S DFN=$O(^TMP($J,"IBSSVI-PATIENT",DFN)) Q:(DFN="")  D
 .K GLOB
 .S CNTHL7=$G(^TMP($J,"IBSSVI-PATIENT",DFN))
 .D SETUP(DFN)
 .S SUB=0
 .F  S SUB=$O(GLOB(SUB)) Q:SUB=""  D INSMUL^IBCNVUT0(CNTHL7,SUB)
 .S STNCNT=0
 .F  S STNCNT=$O(^TMP($J,"IBSSVI-TREATING FACILITY SITE",DFN,STNCNT)) Q:(STNCNT="")!(STNCNT="COUNT")  D
 ..S STATION=$G(^TMP($J,"IBSSVI-TREATING FACILITY SITE",DFN,STNCNT))
 ..D SETSTS(STATION)
 ..D SNDINFO
 .S STATION=0,LOCATION=2
 .F  S STATION=$O(^TMP($J,"IBSSVI","NOT DONE",DFN,STATION)) Q:STATION=""  D
 ..S HNDL=0
 ..F  S HNDL=$O(^TMP($J,"IBSSVI","NOT DONE",DFN,STATION,HNDL)) Q:HNDL=""  D
 ...I '$D(^XTMP(HNDL)) K ^TMP($J,"IBSSVI","NOT DONE",DFN,STATION,HNDL) Q
 ...D DONE(DFN,STATION,HNDL) ; do I have return data.
 .Q
 ;
 I '$D(^TMP($J,"IBSSVI","NOT DONE")) Q  ; Every thing has already completed
 ;
 ;Need to go through the NOT DONE list and see if any have completed.
 D COMPLETE
 Q
 ;
SETSTS(STATION) ;SET STATION NUMBER IN GLOB(PTR,5)
 N PTR
 S PTR=0
 F  S PTR=$O(GLOB(PTR)) Q:PTR=""  S $P(GLOB(PTR,5),"|",5)=STATION
 Q
 ;
SNDINFO ; do all the sending processing
 ;LOGIC NEEDED WITHIN EACH INSURANCE MULTIPLE IN THE PIVOT TABLE, SET TREATING FACILITY SITE (STATION) MULTIPLE ENTRY
 N INSPTR,CNTHL7,ENBLD,CHK,SND,SSVI
 S CNTHL7=$G(^TMP($J,"IBSSVI-PATIENT",DFN)),LOCATION=1  ; PIV0T TABLE RECORD NUMBER, NOT THE PIVOT TABLE #
 S IBICN=$$ICN^IBARXMU(DFN)
 D SEND(.SND,STATION,IBICN,"IBCN SSVI ENABLED")
 S HNDL=SND(0)
 F IBWAIT=1:1:10 H 1 D CHECK(.CHK,HNDL) I $G(CHK(0))["Done" Q
 D RETURN(.ENBLD,HNDL)
 I ENBLD(0)'="ENABLED" D  Q
 .D CLEAR(.CLR,HNDL)  ;do not process if SSVI is not enabled at site.
 D CLEAR(.CLR,HNDL)
 S INSPTR=0
 F  S INSPTR=$O(GLOB(INSPTR)) Q:INSPTR=""  D
 .D TREATSIT^IBCNVUT0(CNTHL7,INSPTR,STATION)
 ;
 D SNDINS(.SND,STATION,IBICN,.GLOB,"IBCN SSVI SEND")
 S HNDL=SND(0)
 D DONE(DFN,STATION,HNDL)
 Q
 ;
COMPLETE ; NEED TO CLOSE OUT ALL THE ENTRIES.
 N DONE
 S DONE=0,LOCATION=3
 F I=1:1 Q:DONE  D
 .I '$D(^TMP($J,"IBSSVI","NOT DONE")) S DONE=1 Q
 .S DFN=0
 .F  S DFN=$O(^TMP($J,"IBSSVI","NOT DONE",DFN)) Q:DFN=""  D
 ..S STATION=0
 ..F  S STATION=$O(^TMP($J,"IBSSVI","NOT DONE",DFN,STATION)) Q:STATION=""  D
 ...S HNDL=0
 ...F  S HNDL=$O(^TMP($J,"IBSSVI","NOT DONE",DFN,STATION,HNDL)) Q:HNDL=""  D
 ....I '$D(^XTMP(HNDL)) K ^TMP($J,"IBSSVI","NOT DONE",DFN,STATION,HNDL) Q
 ....D DONE(DFN,STATION,HNDL)
 Q
 ;
FINISH(DFN,STATION,HNDL) ;
 N CNTHL7,TRANSDAT,INSPTR
 S CNTHL7=$G(^TMP($J,"IBSSVI-PATIENT",DFN))  ; PIV0T TABLE RECORD NUMBER, NOT THE PIVOT TABLE #
 D NOW^%DTC S TRANSDAT=%
 S SSVI=""
 D RETURN(.SSVI,HNDL)
 S INSPTR=1
 F  S INSPTR=$O(SSVI(INSPTR)) Q:INSPTR=""  D
 .S PTR=$P(SSVI(INSPTR),IBP,3)
 .S BUFF=$P(SSVI(INSPTR),IBP,7)
 .S ERROR=$P(SSVI(INSPTR),IBP,8)
 .D TREATTRD^IBCNVUT0(CNTHL7,PTR,STATION,TRANSDAT,BUFF,ERROR)  ;TREATRD(PIVTPTR,INSPTR1,SENDSITE,RECDDAT,RIEN)  ;
 D FINAL^IBCNVUT0(CNTHL7)
 Q
 ;
DONE(DFN,STATION,HNDL) ;
 ;S GLOB(SUB,5)=DFN_"|"_CNTHL7_"|"_INSPTR_"|"_INSPTR1_"|"_STATION_"|"_DSTATION_"|"_RIEN_"|"_ERROR
 N SUB,IBWAIT,RIEN,PTR,DATA
 I 
 F IBWAIT=1:1:120 H 1 D CHECK(.CHK,HNDL) I $G(CHK(0))["Done" D  Q
 .S SSVI=""
 .D RETURN(.SSVI,HNDL)
 .I SSVI(1)'="COMPLETED" D
 ..S SUB=1
 ..F  S SUB=$O(SSVI(SUB)) Q:SUB=""  D
 ...S DATA=SSVI(SUB)
 ...S CNTHL7=$P(DATA,IBP,2)
 ...S PTR=$P(DATA,IBP,3)
 ...S ERROR=$P(DATA,IBP,8)
 ...D ERROR^IBCNVUT0(CNTHL7,PTR,STATION,ERROR)
 .K ^TMP($J,"IBSSVI","NOT DONE",DFN,STATION,HNDL)
 .D FINISH(DFN,STATION,HNDL)
 .Q
 ;
 I $G(SSVI(1))'="COMPLETED" S ^TMP($J,"IBSSVI","NOT DONE",DFN,STATION,HNDL)=""
 ;
 Q
 ;
CHECK(CHK,HNDL) ; called to check the return status of an RPC
 D RPCCHK^XWB2HL7(.CHK,HNDL)
 Q
 ; Get the data that is returned
RETURN(RTN,HNDL) ; called to get the return data and clear the broker
 S RTN(0)=""
 D RTNDATA^XWBDRPC(.RTN,HNDL)
 Q
 ; Clear the XTMP global
CLEAR(CLR,HNDL) ;
 D CLEAR^XWBDRPC(.CLR,HNDL)
 Q
 ; Check if SSVI turned on
SEND(SND,STATION,IBICN,IBRPC) ; called to send off query
 D EN1^XWB2HL7(.SND,STATION,IBRPC,RPCVER,IBICN)
 Q
 ;
RPC(ENBLD,IBICN) ; This determines if SSVI is enabled.
 N DATA
 S DATA=""
 S ENBLD="NOT ENABLED"
 S DATA=+$P($G(^IBE(350.9,1,100)),"^",1)
 I DATA=1 S ENBLD="ENABLED"
 Q
 ; Send Insurance to treating facility
SNDINS(SND,STATION,IBICN,GLOB,IBRPC)  ; SEND INSURANCE TO SITE
 D EN1^XWB2HL7(.SND,STATION,IBRPC,RPCVER,IBICN,.GLOB)
 Q
 ;
EXIT ;
 K DAT,DFN,DOB,ERROR,FULLD,GENDER,GLOB,HL,HLERR,HLMTN,HLNDAP,MON
 K MYOPTNS,MYRESLT,NAME,OPR,PDATE,PEND,PROC,RACE,SRFIND,SSVI
 K SSN,TIME,TIMES,UNIT,VA,VADM,WARD,X,XMDUZ,XMSUB,XMTEXT,XMY,Y
 Q
 ;
CYCLE ;test if SSVI PIN/HL7 PIVOT TABLES HAVE TRANSMIISION REQUEST FLAG SET FOR A PATIENT. CONSOLIDATE REQUESTS INTO 1 REQUEST PER PATIENT
 ;LATER CLEAR REQUEST FLAGS AND SET TRANSMITTED COMPLETED FLAGS IN IB SSVI PIN/HL7 PIVOT FILE
 N CNT,CNTHL7,CNT2,FOUND
 ;W !,LASTINDT
 S CNT=LASTINDT ; TEST 3100524    ;SRSDATE
 F  S CNT=$O(^IBCN(366,"B",CNT)) Q:(CNT>(NOWDATE+.99))!(CNT="")  D
 .;W !,"HERE"
 .S CNTHL7=0
 .;W !,CNT
 .F  S CNTHL7=$O(^IBCN(366,"B",CNT,CNTHL7)) Q:CNTHL7=""  D
 ..S FOUND=0
 ..;W !,FOUND
 ..S PAT=$P($G(^IBCN(366,CNTHL7,0)),"^",3)
 ..;CHECK PREVIOUSLY DETECTED TRANSMISSION REQUEST BITS HERE. IF NOT JUST Q
 ..I $P($G(^IBCN(366,CNTHL7,0)),U,8)'=1 Q
 ..S CNT2=0
 ..F  S CNT2=$O(^TMP($J,"IBSSVI-PATIENT",CNT2)) Q:(CNT2="")!(FOUND)  D
 ...I CNT2=PAT D 
 ....S FOUND=1
 ....;CLEAR REQUIRE TRANSMIISION FLAG, AND SET REDUNDANT(DELETE)FLAG TO NOT COUNT 
 ....;FOR THE TRANSMISSION REPORT, AND ALSO REDUCE OVERHEAD WITHOUT REPEATED 
 ....;SAME TRANSMISSIONS ON PAT
 ....S $P(^IBCN(366,CNTHL7,0),U,8)=0 ; "NO"
 ....;S $P(^IBCN(366,CNTHL7,0),"^",7)=1  ; DELETED  (AND NOT COUNT IN REPORTS).
 ....;REPORTS ON RECEIVE SIDE ALSO COUNT THE SOURCE OF INFO FIELD="INTERFACILITY TRANSFER"
 ....; IN INSURANCE BUFFER AS RECEIVED DATA
 ..I FOUND=0 S ^TMP($J,"IBSSVI-PATIENT",PAT)=CNTHL7 S DFN=PAT D UTL ; MEANS WHEN REQUEST TRANSMIT 
 ..D DELINC^IBCNVCC1(DFN)
 ..;SET SEEN HERE THERE WAS CHECK PREVIOULSY BEFORE SETTING PIN/HL7 PIVOT FILETO 
 ..;INSURANCES ALREADY SET IN MULTIPLE IN IB SSVI PIN/HL7 PIVOT TABLE. 
 ..;WITHIN EACH OF THESE MULTIPLES THE TREATING SITES NEED TO BE ENTERED
 ..;TO SEE IF ANY TREATING FACILITY SITES FOR THAT PATIENT. 
 ..;SET DATE OF TRANSMISSION UPON SENDING TO EACH FACILITY SITE  
 ..;CLEAR TOTAL TRANSMISSION REQUEST FLAG FOR PATIENT, AND SET NEED TO TRANSMIT FLAG.
 Q
 ;
UTL ;
 N DGP,I,INSPTR,ICNTSTA
 N IBT1,STNCNT,DGHL7END,INSPTR1,STATION,DEFINST,FSHDT,INCON
 S DGHL7END=36 ; WILL BE 36
 ;PATIENT COMMON DATA BELOW. DFN DEFINED FROM CALL TO CYCLE ABOVE
 D DEM^VADPT
 S NAME=VADM(1),SSN=VA("PID")  ; INTO PID SEGMENT
 ; USE CALL TO TFL^IBARXMU(DFN,IBT) ; returns treating facility list (pass IBT by reference)
 ; supported references ia #2990 and #10112, value returned is count
 ; needed to N Y because VAFCTFU1 will kill it
 N IBC,IBZ,IBS,IBFT,Y
 ; CALL API HERE FOR TREATING FACILITY LIST IN ^TMP($J,"IBSSVI-TREATING FACILITY SITE") ARRAY FOR PATIENT DFN
 K IBT1
 ;
 ; FLAG PER TREATING FACILITY IN MULTIPLE IN INSURANCE TYPE MULTIPLE FOR TREATING FACILITIES SENT  IN PIN/HL7 PIVOT FILE
 D TFL^IBARXMU(DFN,.IBT1) ;ARRAY IN FORMAT IBT1(1)=500^2960101^ptr to ADT/HL7 Event Reason file (if exists)
 ;    Where the first piece is the IEN of the institution, the second
 ;    piece is the current date on record for that institution and the
 ;    third piece is the event reason (if it exists).
 ;    ALSO SCREENS OUT OTHER SITES BESIDES TYPES ="^VAMC^M&ROC^RO-OC^"
 ;
 S STNCNT=0
 S ^TMP($J,"IBSSVI-TREATING FACILITY SITE",DFN,"COUNT")=0
 S SITE=$$SITE^VASITE
 S DEFINST=$$GET1^DIQ(8989.3,1_",",217,"I")  ; DEFAULT INSTITUTION
 S DSTATION=$$GET1^DIQ(4,DEFINST_",",99,"I")
 I DSTATION="" S DSTATION=$P(SITE,U,3)
 S SITPTR=$P(SITE,U,1)
 S ICNTSTA=0
 F  S STNCNT=$O(IBT1(STNCNT)) Q:(STNCNT="")  D
 .;DO NOT COUNT OWN SITE
 .I DSTATION'=+IBT1(STNCNT) S ICNTSTA=ICNTSTA+1 S ^TMP($J,"IBSSVI-TREATING FACILITY SITE",DFN,ICNTSTA)=+IBT1(STNCNT)  ; FIRST PIECE NUMERIC STATION NUMBER AS IEN OF DEFAULT INTSITUTION OF KERNEL SYSTEM PARAMETER FILE
 .S ^TMP($J,"IBSSVI-TREATING FACILITY SITE",DFN,"COUNT")=^TMP($J,"IBSSVI-TREATING FACILITY SITE",DFN,"COUNT")+1
 .;ANY TREATING FACILITIES AS RECEIVING FACILITIES FOR REROUTING IN MSH SEGMENT JUST PRIOR TO CALL TO GENERATE^HLMA
 ;DO THIS FOR ALL INSURANCE TYPE MULTIPLES
 S INSURNM=0
 F  S INSURNM=$O(^DPT(DFN,.312,"B",INSURNM)) Q:INSURNM=""  D
 .S INSPTR=0
 .F  S INSPTR=$O(^DPT(DFN,.312,"B",INSURNM,INSPTR)) Q:INSPTR=""  D
 ..S INSPTR1=$P($G(^DPT(DFN,.312,INSPTR,0)),"^",1)
 ..S EXPRD=$$EXPRD(DFN,INSPTR)
 ..I EXPRD Q
 ..S INCON=$$INCON(DFN,INSPTR)
 ..I INCON Q
 ..S FSHDT=$$FRSHDT(DFN,INSPTR)
 ..I FSHDT Q
 ..S INSNAMEP=INSPTR1
 ..S NAMEINS=$P($G(^DIC(36,INSPTR1,0)),"^",1)
 ..;
 ..; CHECK IF "USE FOR HL7" IN EACH RECORD (I) IN 366.2 REPRESENTING A FIELD IN INSURANCE MULTIPLE OF PATIENT
 ..F I=0:0 S I=$O(^IBCN(366.2,I)) Q:'I!(I=DGHL7END)  I $D(^IBCN(366.2,I,0)),$S($P(^IBCN(366.2,I,0),"^",6):1,1:0) D SASK^IBCNVUT0(I,INSPTR,DFN)
 ..S ^TMP($J,"IBSSVI",DFN,INSPTR,1)=NAME_"|"_NAMEINS_"|"_GROUPLAN_"|"_COORDBEN_"|"_SUBSCRID_"|"_SSN_"|"_DATELVER_"|"_GROUPNUM_"|"_INSURDOB_"|"_INSURSSN_"|"_INSGENDR_"|"_INSNAMEP
 ..S ^TMP($J,"IBSSVI",DFN,INSPTR,2)=PTRELHIP_"|"_WHOSEINS_"|"_EFFCTDPO_"|"_GROUPNAM_"|"_PTRELINS_"|"_INSNAME_"|"_"|"_SENDBEMP_"|"_SUBEMPNM_"|"_SEMPLCLA_"|"_SEMPLCL2
 ..S ^TMP($J,"IBSSVI",DFN,INSPTR,3)=SEMPLCL3_"|"_SEMPLCLC_"|"_SEMPLCLS_"|"_SEMPLCLZ_"|"_SEMPLCLP_"|"_ESHGP_"|"_INSEXPDT_"|"_POLNBILL_"|"_INSSTAD_"|"_INSSTAD2_"|"_INSCITY_"|"_INSSTATE_"|"_INSZIP_"|"_INSPHONE_"|"_PATIENTI
 ..D GETINFO  ;get new needed info.
 ..S ^TMP($J,"IBSSVI",DFN,INSPTR,4)=PAYER_"|"_PAYERNM_"|"_BN_"|"_PCN_"|"_TOPNM_"|"_DOB_"|"_GENDER_"|"_RACE_"|"_POLNBILL_"|"_GROUPLNM
 ..S ^TMP($J,"IBSSVI",DFN,INSPTR,5)=DFN_"|"_CNTHL7_"|"_INSPTR_"|"_INSPTR1_"||"_DSTATION
 ..S GROUPPCM=""
 ..S ITEMC=0
 ..I GROUPLAN'="" D
 ...S ITEM=0
 ...F  S ITEM=$O(^IBA(355.3,GROUPLAN,11,ITEM)) Q:ITEM=""  D
 ....S GROUPPCM=$G(^IBA(355.3,GROUPLAN,11,ITEM,0))
 ....S ^TMP($J,"IBSSVI",DFN,INSPTR,6,ITEMC)=GROUPPCM
 Q
 ;
GETINFO ; Get the new fields that do not already exist.
 I GROUPLAN'="" D
 .S GROUPLNM=""
 .;S GROUPLNM=$P($G(^IBA(355.3,GROUPLAN,0)),"^",1)
 .S GROUPLNM=$$GET1^DIQ(355.3,GROUPLAN_",",.01,"I")
 .;I GROUPLNM'="" S GROUPLNM=$P($G(^DIC(36,GROUPLNM,0)),U)
 .I GROUPLNM'="" S GROUPLNM=$$GET1^DIQ(36,GROUPLNM_",",.01)
 S DOB=$$GET1^DIQ(2,DFN_",",.03,"I")
 S GENDER=$$GET1^DIQ(2,DFN_",",.02,"I")
 S RACE=$$GET1^DIQ(2,DFN_",",.06,"I") I RACE>0 S RACE=$P($G(^DIC(10,RACE,0)),"^",2)
 S POLNBILL=$$GET1^DIQ(2.312,INSPTR_",",3.04,"I")
 S PAYER=$$GET1^DIQ(36,INSPTR1_",",3.1,"I")
 S PAYERNM=$$GET1^DIQ(365.12,PAYER_",",.01,"I")
 S INGRP=$O(^IBA(355.3,"B",INSPTR1_",",0))
 S BN=$$GET1^DIQ(355.3,INGRP_",",6.02,"I")
 S PCN=$$GET1^DIQ(355.3,INGRP_",",6.03,"I")
 S TOP=$$GET1^DIQ(355.3,INGRP_",",.09,"I")
 S TOPNM=$$GET1^DIQ(355.1,TOP_",",.01,"I")
 Q
 ;
SETUP(DFN) ;
 N I,J,PTR
 S PTR=0,J=-1
 F  S PTR=$O(^TMP($J,"IBSSVI",DFN,PTR)) Q:PTR=""  D 
 .F I=1:1:5 S GLOB(PTR,I)=^TMP($J,"IBSSVI",DFN,PTR,I)
 .F  S J=$O(^TMP($J,"IBSSVI",DFN,PTR,6,J)) Q:J=""  S GLOB(PTR,6+J)=^TMP($J,"IBSSVI",DFN,PTR,6,J)
 Q
 ;
INCON(DFN,INSPTR) ; SEE IF HAS INCONSISTANCIES
 N PTR,ISPTR,NO
 S (PTR,NO)=0
 F  S PTR=$O(^IBCN(366.1,DFN,PTR)) Q:PTR=""  D
 .S ISPTR=0
 .F  S ISPTR=$O(^IBCN(366.1,DFN,PTR,"B",ISPTR)) Q:ISPTR=""  D
 ..I ISPTR=INSPTR S NO=1
 Q NO
 ;
FRSHDT(DFN,INSPTR) ;
 N NO,FRESHDAY,FRESHDT,DR,IENS
 S NO=0,DR=1.03
 S IENS=DFN_","  ;",.312,"
 S IENS=INSPTR_","_IENS
 S DATELVER=$$GET1^DIQ(2.312,IENS,DR,"I") ;Date last verifyed 
 ;
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1) ; System freshness days
 S FRESHDT=$$FMADD^XLFDT(DT,-FRESHDAY)
 I DATELVER<FRESHDT S NO=1
 Q NO
 ;
EXPRD(DFN,INSPTR) ;Is expiration date null or in future?
 N EXDAT,NO
 S NO=0
 S EXDAT=$P(^DPT(DFN,.312,INSPTR,0),U,4)
 I EXDAT'="" D
 .I EXDAT>DT Q
 .S NO=1
 Q NO
