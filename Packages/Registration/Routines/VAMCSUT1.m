VAMCSUT1 ;ALB/JRP/EG/PB - MPD UTILITY ROUTINES; [ 05/23/94   9:34 AM ] ;10/3/95  09:22
 ;;NT DATASET;;**2**;MINIMAL PATIENT DATASET;;APR 3,1995 ;CFB MODIFIED ERRSTORE EXTRINSIC 19 SEP 1995
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
H2D(H) ;RETURNS DECIMAL EQUIVALENT OF HEX NUMBER
 ;INPUT  : H - Hex number
 ;OUTPUT : Decimal equivalent of H (success)
 ;         '-1^ERROR TEXT' - Error
 Q:($G(H)="") "-1^No character passed (H2D)"
 N D,N,P,E,L
 S (E,N,D)=0,L=$L(H)
 F P=1:1:L D  Q:(N="ERROR")!(E="ERROR")
 .S N=$E(H,P)
 .S N=$$CNVRT(N)
 .Q:N="ERROR"
 .S E=$$POWER(16,(L-P))
 .Q:E="ERROR"
 .S D=D+(N*E)
 Q:(N="ERROR")!(E="ERROR") "-1^ERROR (H2D)"
 Q D
CNVRT(X) ;DETERMINE DECIMAL EQUIVALENT OF SINGLE HEX CHARACTER
 ;INPUT  : X - Single hex number/letter
 ;OUTPUT : Decimal equivalent of X (success)
 ;         '-1^ERROR TEXT' - Error
 Q:($G(X)="") "-1^No character passed (CNVRT)"
 ;DECIMAL
 I ($A(X)>47)&($A(X)<58) Q X
 ;A THROUGH F
 I ($A(X)>64)&($A(X)<71) Q ($A(X)-55)
 ;ERROR
 Q "-1^ERROR (CNVRT)"
POWER(X,Y) ;RETURNS X TO THE Yth POWER
 ;INPUT  : X - Base number
 ;         Y - Exponent (must be an integer)
 ;OUTPUT : X**Y (success)
 ;         '-1^ERROR TEXT' - Error
 Q:($G(Y)="") "-1^No exponent passed (POWER)"
 Q:($G(X)="") "-1^No number passed (POWER)"
 N Z,W,INV
 ;CHECK EXPONENT (ERROR)
 Q:((Y#1)'=0) "-1^Bad exponent (POWER)"
 ;CHECK FOR NEGATIVE EXPONENT
 S INV=$S((Y<0):1,1:0)
 S:INV Y=0-Y
 ;DETERMINE X**Y
 S W=1
 Q:(Y=0) 1
 F Z=1:1:Y S W=W*X
 ;EXPONENT IS NEGATIVE - INVERT
 S:INV W=1/W
 Q W
D2H(D) ;CONVERT FROM ASCII CHAR TO 2-BYTE HEX
 ;INPUT : D - A VALID ASCII CHARACTER
 ;OUPUT : HEX REPRESENTATION OF ASCII NUMBER OF CHARACTER (SUCCESS)
 ;      : '-1^ERROR TEXT' ERROR
 Q:($G(D)="") "-1^No character passed (D2H)"
 N ASC,HIBYTE,LOBYTE
 S ASC=$A(D)
 S HIBYTE=ASC/16
 S HIBYTE=$$CVTCH(HIBYTE)
 S LOBYTE=ASC#16
 S LOBYTE=$$CVTCH(LOBYTE)
 S D=$C(HIBYTE,LOBYTE)
 I (HIBYTE="ERROR")!(LOBYTE="ERROR") S D="ERROR"
 K ASC,HIBYTE,LOBYTE
 Q D
CVTCH(X) ;CONVERT A BYTE FROM ASCII TO HEX
 ;INPUT  : X - A NUMBER IN THE RANGE 0<X<17
 ;OUTPUT : HEX CHARACTER IN THE RANGE "0" TO "F" (SUCCESS)
 ;       : '-1^ERROR TEXT' ERROR
 Q:($G(X)="") "-1^No character passed (CVTCH)"
 I (X>-1)&(X<10) Q (X+48)
 I (X>9)&(X<17) Q (X+55)
 Q "-1^ERROR (CVTCH)"
ENCODE(WORD) ; ENCODE A STRING INTO 2-BYTE HEX 
 ; I.E. $$ENCODE("9") RETURNS "39" <- HEX FOR ASCII 9
 ;INPUT  : WORD - STRING OF VARIABLE LENGTH TO BE ENCODED
 ;OUTPUT : STRING OF WORD*2 LENGTH IN HEX (SUCCESS)
 ;       : '-1^ERROR TEXT' ERROR
 Q:($G(WORD)="") "-1^No word to be encoded!"
 N RETURN,Q,LENGTH
 S RETURN=""
 S LENGTH=$L(WORD)
 ;LOOP BY ENCODING ONE BYTE AT A TIME
 F Q=1:1:LENGTH S RETURN=RETURN_$$D2H($E(WORD,Q,Q))
 Q RETURN
DECODE(WORD) ; DECODE A STRING INTO 1-BYTE ASCII
 ; $$DECODE("39") RETURNS "9"
 ;INPUT  : WORD - STRING WITH VALID HEX IF EVEN LENGTH TO BE DECODED
 ;OUTPUT : STRING WITH EACH 2-BYTE HEX REPLACED WITH 1-BYTE ASCII
 ;       : '-1^ERROR TEXT' ERROR
 Q:($G(WORD)="") "-1^No word to be decoded!"
 N RETURN,Q,LENGTH
 S RETURN=""
 S LENGTH=$L(WORD)
 Q:((WORD#2)'=0) "-1^String to be decoded needs an even number of characters"
 ;LOOP BY DECODING TWO BYES AT A TIME
 F Q=1:2:LENGTH S RETURN=RETURN_$$H2D($E(WORD,Q,Q+1))
 Q RETURN
MPDSSN(SSN,KEY) ; CREATE AN MPD SSN (ENCODE AND ENCRYPT)
 ;INPUT  : SSN - A 10 CHARACTER SSN ('P' AT THE END SIGNALS PSEUDO)
 ;OUTPUT : 18 CHARACTER SSN FOR SEARCHING IN MPD GLOBAL (SUCCESS)
 ;       : '-1^ERROR TEXT' ERROR
 Q:($G(KEY)="") "-1^Key not passed (MPDSSN)"
 Q:($G(SSN)="") "-1^SSN not passed (MPDSSN)"
 Q:($L(SSN)<9) "-1^SSN too short (MPDSSN)"
 Q:($L(SSN)>10) "-1^SSN too long (MPDSSN)"
 N CRYSSN,CODESSN
 ;ENCRYPT SSN
 S CRYSSN=$$ONEDES^VAMCSDS1($E(SSN,1,8),KEY,0) I CRYSSN<0,$L(CRYSSN)>9 S X=$$ERRSTORE^VAMCSUT3(CRYSSN) Q CRYSSN ;MOD CFB TO RECORD ERRORS
 ;ENCODE SSN
 I (DEBUG) W !,"...ENCRYPTED SSN: ",CRYSSN,!
 S CODESSN=$$ENCODE(CRYSSN)
 S CODESSN=CODESSN_$E(SSN,9,10)
 I ('$E(SSN,10,10)) S CODESSN=CODESSN_" "
 Q CODESSN
